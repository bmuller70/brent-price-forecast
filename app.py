import streamlit as st
import gdown
import pickle
from prophet import Prophet
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import requests
import numpy as np

# Fun√ß√£o para carregar o modelo Prophet
@st.cache_resource
def carregar_modelo():
    url = 'https://drive.google.com/uc?id=11eL3dI9aeUGjVKUSDGrDccLJ4tPQMHTD'
    gdown.download(url, 'prophet_model.pkl', quiet=False)

    with open('prophet_model.pkl', 'rb') as f:
        modelo = pickle.load(f)
    
    return modelo

# Fun√ß√£o para baixar e salvar o arquivo Excel
@st.cache_data
def dados_xls():
    url = 'https://raw.githubusercontent.com/marialuisamartins/tech_fase4/6ad3e07bc901fd984eedb3030510b2816aaf7383/ipeadata%5B03-11-2024-01-09%5D.xlsx'
    arquivo_local = 'ipeadata.xlsx'
    response = requests.get(url)
    with open(arquivo_local, 'wb') as file:
        file.write(response.content)

    return arquivo_local

# Fun√ß√£o principal do aplicativo
def main():
    st.set_page_config(page_title='MVP para an√°lise temporal de petr√≥leo', page_icon='üõ¢Ô∏è')
    st.write('# MVP para an√°lise de pre√ßo do petr√≥leo Brent')

    # Carregar modelo e dados
    arquivo_excel = dados_xls()
    modelo = carregar_modelo()
    st.success("Modelo carregado com sucesso!")
    
    # Ler o arquivo Excel
    ipeadata = pd.read_excel(arquivo_excel, engine='openpyxl')
    ipeadata['data'] = pd.to_datetime(ipeadata['data'], errors='coerce')
    ipeadata = ipeadata.dropna(subset=['data', 'preco'])
    ipeadata.set_index('data', inplace=True)
    ipeadata_filtered = ipeadata[ipeadata.index >= '2021-01-01']

    # Estiliza√ß√£o HTML
    st.markdown("""
        <style>
            .header-bar {
                background-color: #2C3E50;
                padding: 10px;
                color: white;
                text-align: center;
                font-size: 24px;
                font-weight: bold;
            }
        </style>
        <div class="header-bar">Dashboard Interativo de Previs√£o e An√°lise do Pre√ßo do Petr√≥leo</div>
    """, unsafe_allow_html=True)

    st.sidebar.image('https://upload.wikimedia.org/wikipedia/commons/5/54/Logo_FIAP.png', use_container_width=True)
    st.sidebar.header("Explora√ß√£o do Pre√ßo do Petr√≥leo")

    # Estat√≠sticas
    st.markdown("### Estat√≠sticas e Insights")
    st.write(f"**Valor m√°ximo no per√≠odo**: ${ipeadata_filtered['preco'].max():,.2f}")
    st.write(f"**Valor m√≠nimo no per√≠odo**: ${ipeadata_filtered['preco'].min():,.2f}")
    st.write(f"**M√©dia do per√≠odo**: ${ipeadata_filtered['preco'].mean():,.2f}")
    st.write(f"**Desvio padr√£o**: ${ipeadata_filtered['preco'].std():,.2f}")

    # Previs√µes
    df_forecast = pd.DataFrame({'ds': ipeadata_filtered.index, 'y': ipeadata_filtered['preco']})
    future = modelo.make_future_dataframe(periods=2)
    forecast = modelo.predict(future)
    previsao_hoje = forecast[forecast['ds'] == df_forecast.index[-1]]['yhat'].values[0]
    previsao_amanha = forecast[forecast['ds'] == future['ds'].iloc[-1]]['yhat'].values[0]
    tendencia = "subindo" if previsao_amanha > previsao_hoje else "descendo"
    icone_tendencia = "üîº" if tendencia == "subindo" else "üîΩ"

    st.markdown("### Previs√£o de Pre√ßo")
    st.write(f"**Previs√£o para hoje**: ${previsao_hoje:,.2f}")
    st.write(f"**Previs√£o para amanh√£**: ${previsao_amanha:,.2f} {icone_tendencia} ({tendencia})")

    # Gr√°fico comparativo por ano
    ipeadata_filtered['year'] = ipeadata_filtered.index.year
    fig1, ax1 = plt.subplots(figsize=(14, 6))
    sns.lineplot(data=ipeadata_filtered, x=ipeadata_filtered.index, y='preco', hue='year', marker='o', palette='tab10')
    ax1.set_title("Compara√ß√£o de Pre√ßos por Ano")
    st.pyplot(fig1)

    # Gr√°fico de picos mensais
    ipeadata_filtered['month'] = ipeadata_filtered.index.month
    monthly_max = ipeadata_filtered.groupby('month')['preco'].max()
    fig2, ax2 = plt.subplots(figsize=(14, 6))
    monthly_max.plot(kind='bar', color='orange', ax=ax2)
    ax2.set_title("Picos Mensais de Pre√ßo")
    st.pyplot(fig2)

    # √öltimos 15 dias
    st.markdown("### √öltimos 15 Dias")
    fig3, ax3 = plt.subplots(figsize=(14, 6))
    ax3.plot(ipeadata_filtered.tail(15).index, ipeadata_filtered.tail(15)['preco'], marker='o', linestyle='-', color='blue')
    ax3.set_title("Pre√ßos - √öltimos 15 Dias")
    st.pyplot(fig3)

    # An√°lises adicionais
    analise_opcao = st.selectbox("Escolha uma an√°lise:", ["M√©dia M√≥vel de 7 dias", "Distribui√ß√£o dos Pre√ßos"])
    if analise_opcao == "M√©dia M√≥vel de 7 dias":
        ipeadata_filtered['media_movel_7'] = ipeadata_filtered['preco'].rolling(window=7).mean()
        fig4, ax4 = plt.subplots(figsize=(14, 6))
        ax4.plot(ipeadata_filtered.index, ipeadata_filtered['media_movel_7'], label="M√©dia M√≥vel 7 dias", color='orange')
        st.pyplot(fig4)
    elif analise_opcao == "Distribui√ß√£o dos Pre√ßos":
        fig5, ax5 = plt.subplots(figsize=(12, 6))
        sns.histplot(ipeadata_filtered['preco'], kde=True, bins=30, color='skyblue', ax=ax5)
        st.pyplot(fig5)

# Rodar o aplicativo
if __name__ == "__main__":
    main()
