import streamlit as st
import gdown
import pickle
from prophet import Prophet
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from datetime import datetime
import numpy as np

# Fun√ß√£o para carregar o modelo Prophet
@st.cache_resource
def carregar_modelo():
    url = 'https://drive.google.com/uc?id=11eL3dI9aeUGjVKUSDGrDccLJ4tPQMHTD'
    gdown.download(url, 'prophet_model.pkl', quiet=False)

    with open('prophet_model.pkl', 'rb') as f:
        modelo = pickle.load(f)
    return modelo

# Fun√ß√£o para carregar os dados
@st.cache_data
def carregar_dados():
    url = 'https://raw.githubusercontent.com/marialuisamartins/tech_fase4/6ad3e07bc901fd984eedb3030510b2816aaf7383/ipeadata%5B03-11-2024-01-09%5D.xlsx'
    response = requests.get(url)
    with open('ipeadata.xlsx', 'wb') as file:
        file.write(response.content)
    ipeadata = pd.read_excel('ipeadata.xlsx', engine='openpyxl')
    ipeadata['data'] = pd.to_datetime(ipeadata['data'])
    return ipeadata

def main():
    # Configura√ß√£o da p√°gina
    st.set_page_config(page_title='MVP para an√°lise temporal de petr√≥leo', page_icon='üõ¢Ô∏è')

    st.write('# MVP para an√°lise de pre√ßo do petr√≥leo Brent')

    # Carregar dados e modelo
    modelo = carregar_modelo()
    dados = carregar_dados()
    st.success("Modelo e dados carregados com sucesso!")

    # Processar dados
    dados.set_index('data', inplace=True)
    dados_filtered = dados[dados.index >= '2021-01-01']

    # Exibi√ß√£o de estat√≠sticas
    st.markdown("### Estat√≠sticas do Per√≠odo (2021-2024)")
    st.write(f"**Valor m√°ximo**: ${dados_filtered['preco'].max():,.2f}")
    st.write(f"**Valor m√≠nimo**: ${dados_filtered['preco'].min():,.2f}")
    st.write(f"**M√©dia**: ${dados_filtered['preco'].mean():,.2f}")
    st.write(f"**Desvio Padr√£o**: ${dados_filtered['preco'].std():,.2f}")

    # Previs√£o
    futuro = modelo.make_future_dataframe(periods=2)
    forecast = modelo.predict(futuro)
    previsao_hoje = forecast.iloc[-2]['yhat']
    previsao_amanha = forecast.iloc[-1]['yhat']
    tendencia = "subindo" if previsao_amanha > previsao_hoje else "descendo"
    icone_tendencia = "üîº" if tendencia == "subindo" else "üîΩ"

    st.markdown("### Previs√£o")
    st.write(f"**Hoje**: ${previsao_hoje:,.2f}")
    st.write(f"**Amanh√£**: ${previsao_amanha:,.2f} {icone_tendencia} ({tendencia})")

    # Gr√°ficos
    st.markdown("### Gr√°fico de Pre√ßo Di√°rio")
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.lineplot(data=dados_filtered, x=dados_filtered.index, y='preco', ax=ax, color='blue')
    ax.set_title('Evolu√ß√£o do Pre√ßo do Petr√≥leo (2021-2024)')
    ax.set_xlabel('Data')
    ax.set_ylabel('Pre√ßo (USD)')
    st.pyplot(fig)

    # Gr√°fico de M√©dia M√≥vel
    st.markdown("### M√©dia M√≥vel de 30 dias")
    dados_filtered['media_movel_30'] = dados_filtered['preco'].rolling(30).mean()
    fig2, ax2 = plt.subplots(figsize=(12, 6))
    ax2.plot(dados_filtered.index, dados_filtered['preco'], label='Pre√ßo Di√°rio', color='blue', alpha=0.5)
    ax2.plot(dados_filtered.index, dados_filtered['media_movel_30'], label='M√©dia M√≥vel de 30 dias', color='orange')
    ax2.set_title('Pre√ßo do Petr√≥leo e M√©dia M√≥vel (30 dias)')
    ax2.legend()
    st.pyplot(fig2)

# Executar o app
if __name__ == "__main__":
    main()
